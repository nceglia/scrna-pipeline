#!/usr/bin/env python3
import click
import os
import subprocess
import yaml
import shutil
import glob

@click.command()
@click.option('--project', prompt='Project name.', help='Project name for pipeline run.')
@click.option('--image', prompt='docker or singularity image.', help='Image name (nceglia/scrna-pipeline:latest, scrna-pipeline.img, etc...)')
@click.option('--runtime', prompt='docker or singularity.', help='Whether to run sub tasks with docker or singularity command.')
@click.option('--config', prompt='YAML cell type markers.', help='YAML file with cell type and gene markers (see resources/markers.yaml)')
@click.option('--jobs', prompt='Max jobs.', help='Number of parallel jobs.')
@click.option('--mem', prompt='Max jobs.', help='Memory per core.')
@click.option('--mode', prompt='Job mode (local, lsf, sge, etc.)', help='Job mode provided to martian.')

def rnascp(project, image, runtime, config, jobs, mode, mem):
    print("\n")
    install_dir = os.environ["RNASCP_DIR"]
    mro_dir = os.environ["MROPATH"]
    mrp = shutil.which("mrp")
    if not mrp:
        raise ValueError("No 'mrp' executable found.")
    with open(config) as f:
        params = yaml.load(f,Loader=yaml.FullLoader)
        globals().update(params)

    click.echo(click.style('******** SCRNA-PIPELINE ********', fg='green'))
    click.echo(click.style('Building Config...', fg='blue'))
    click.echo(click.style("Project Name: ", fg='green', bold=True),nl=False)
    click.echo(click.style(project, fg='red', bold=True))
    click.echo(click.style("Image: ", fg='green', bold=True),nl=False)
    click.echo(click.style(image, fg='red', bold=True))
    click.echo(click.style("Runtime: ", fg='green', bold=True),nl=False)
    click.echo(click.style(runtime, fg='red', bold=True))
    click.echo(click.style("Parallel Jobs: ", fg='green', bold=True),nl=False)
    click.echo(click.style(jobs, fg='red', bold=True))
    click.echo(click.style("Job Mode: ", fg='green', bold=True),nl=False)
    click.echo(click.style(mode, fg='red', bold=True))
    click.echo(click.style("Memory: ", fg='green', bold=True),nl=False)
    click.echo(click.style(mem + "GB", fg='red', bold=True))
    click.echo(click.style("RNASCP Installation: ", fg='green', bold=True),nl=False)
    click.echo(click.style(install_dir, fg='red', bold=True))
    click.echo(click.style("MRO: ", fg='green', bold=True),nl=False)
    click.echo(click.style(mro_dir, fg='red', bold=True))
    click.echo(click.style("MRP: ", fg='green', bold=True),nl=False)
    click.echo(click.style(mrp, fg='red', bold=True))
    click.echo(click.style("Martian Command: ", fg='green', bold=True),nl=False)

    output = open("__{}.mro".format(project),"w")
    output.write('@include \"pipeline.mro\"\n')
    output.write('call RNASCP(\n')
    # output.write('\tproject = "{}",\n'.format(project))
    output.write('\tmito = {},\n'.format(mito))
    output.write('\tncounts = {},\n'.format(ncounts))
    output.write('\tnfeatures = {},\n'.format(nfeatures))
    output.write('\tscrublet_score = {},\n'.format(scrublet_score))
    output.write('\timage = "{}",\n'.format(image))
    output.write('\truntime = "{}",\n'.format(runtime))
    output.write('\tcelltype_markers_yaml = "{}",\n'.format(celltype_markers_yaml))
    output.write('\tinventory = "{}",\n'.format(inventory))
    output.write('\tmincells = {},\n'.format(mincells))
    output.write('\tcell_cycle_genes = "{}",\n'.format(cell_cycle_genes))

    output.write(')\n')
    output.close()
    cmd = "mrp __{0}.mro {0} --jobmode={1} --maxjobs={2} --mempercore={3}".format(project, mode, jobs, mem)
    print(cmd)
    print("\n")
    try:
        subprocess.call(cmd.split())
    except Exception as e:
        print(e)
        exit(0)

    outs_path = "RNASCP/RNASCP/fork0/_outs"
    assert os.path.exists(outs_path), "Pipeline had errors. See above."
    results = eval(open(outs_path,"r").read())
    print("\n")
    if not os.path.exists("results"):
        os.makedirs("results")
    for result, files in results.items():
        subfolder = "results/{}".format(result)
        if not os.path.exists(subfolder):
            os.makedirs(subfolder)
        for key, path in files.items():
            subfolder_key = "results/{}/{}/".format(result,key)
            filename = os.path.split(path)[1]
            target = os.path.join(subfolder_key, filename)
            if not os.path.exists(subfolder_key):
                os.makedirs(subfolder_key)
            shutil.copyfile(path,target)
            print("Saving - {}".format(filename))
    print("\n")
    print("Completed!")

if __name__ == '__main__':
    rnascp()